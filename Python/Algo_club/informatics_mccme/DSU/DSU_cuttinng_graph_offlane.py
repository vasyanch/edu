# Так как задача данна в оффлайн она решается в обратном порядке.
# Сначала считываются все входные данные, а затем начинается обработка
# запросов начиная с последнего.

# Задача №2786. Разрезание графа
# Дан неориентированный граф. Над ним в заданном порядке производят
# операции следующих двух типов:
#   cut — разрезать граф, то есть удалить из него ребро;
#   ask — проверить, лежат ли две вершины графа в одной компоненте
# связности.
# Известно, что после выполнения всех операций типа cut рёбер в графе
# не осталось. Найдите результат выполнения каждой из операций типа ask.
# Входные данные:
#   Первая строка входного файла содержит три целых числа, разделённые
#   пробелами — количество вершин графа n, количество рёбер m и
#   количество операций k (1<n<50000, 0<m<100000, m<k<150000).
# Следующие m строк задают рёбра графа; i-ая из этих строк содержит
# два числа ui и vi (1=<ui<vi<=n), разделённые пробелами — номера
# концов i-го ребра. Вершины нумеруются с единицы; граф не содержит
# петель и кратных рёбер.
# Далее следуют k строк, описывающих операции. Операция типа cut
# задаётся строкой „cut u v“ (1<=u<v<=n ), которая означает, что из
# графа удаляют ребро между вершинами u и v. Операция типа ask задаётся
# строкой „ask u v“ (1<=u<v<=n ), которая означает, что необходимо
# узнать, лежат ли в данный момент вершины u и v в одной компоненте
# связности. Гарантируется, что каждое ребро графа встретится в
# операциях типа cut ровно один раз.
# Выходные данные:
#   Для каждой операции ask во входном файле выведите на отдельной
#   строке слово „YES“, если две указанные вершины лежат в одной
#   компоненте связности, и „NO“ в противном случае. Порядок ответов
#   должен соответствовать порядку операций ask во входном файле.


class DSU:

    def __init__(self, n):
        self.parent = list(range(n))
        self.rank = [0] * n  # ранк - это глубина дерева

    def make_set(self):
        self.parent.append(len(self.parent))
        self.rank.append(0)

    def find_set(self, v):
        if v == self.parent[v]:
            return v
        self.parent[v] = self.find_set(self.parent[v])
        return self.parent[v]

    def union_sets(self, a, b):
        a = self.find_set(a)
        b = self.find_set(b)
        if a != b:
            if self.rank[a] < self.rank[b]:
                a, b = b, a
            self.parent[b] = a
            if self.rank[a] == self.rank[b]:
                self.rank[a] += 1


if __name__ == '__main__':
    n, m, k = map(int, input().split())
    dsu = DSU(n)
    ribs = []
    for i in range(m):
        ribs.append(tuple(map(int, input().split())))
    operations = []
    for j in range(k):
        operations.append(tuple(input().split()))
    # print(ribs, operations)

    operations.reverse()
    ans = []

    for x in operations:
        if x[0] == 'ask':
            if dsu.find_set(int(x[1]) - 1) == dsu.find_set(int(x[2]) - 1):
                ans.append('YES')
            else:
                ans.append('NO')
        if x[0] == 'cut':
            dsu.union_sets(int(x[1]) - 1, int(x[2]) - 1)
    ans.reverse()
    for i in ans:
        print(i)


